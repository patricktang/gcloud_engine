input {
  file {
    path => ["/opt/vols/nginx/logs/access.log"]
    #start_position => "beginning"
    start_position => "end"
    sincedb_path => "/tmp/access.log.sincedb"
    type => "access.log"
  }
}

filter {
  grok {
    match => { 
      "message" => "^\"(?<ip>%{IP}(, %{IP})*)\" %{DATA:sid} %{DATA:name} \[%{HTTPDATE:log_timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:status_code} (?:%{NUMBER:body_bytes_sent}|-) \"(?:%{GREEDYDATA:http_referrer}|-)\" \"(%{GREEDYDATA:user_agent}|-)\""  
    }
  }

  mutate {
    remove_field => [ "message" ]
    gsub => [ "ip", " ", "" ] 
  }

  date {
    match => [  "log_timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    target => "log_date"
  }

  mutate {
    copy => { "request" => "request_full" }
  }

#  if [request] =~ /[\?]/ {
#    mutate {
#      copy => { "request" => "rqa" }
#    }
#    mutate {
#      split => [ "rqa", "?" ]
#    }
#    mutate {
#      add_field => { "lookup_url" => "http://127.0.0.1:19080/lookup%{[rqa][0]}.json?%{[rqa][1]}" }
#    }
#  }
#  else {
#    mutate {
#      add_field => { "lookup_url" => "http://127.0.0.1:19080/lookup%{request}.json" }
#    }
#  }
#
#  http {
#    url => "%{lookup_url}"
#    target_body => "lookup_body"
#    target_headers => "lookup_headers"
#  }

  mutate {
    split => ["ip", ","]
    add_field => { "real_client_ip" => "%{[ip][0]}" }
  }


  useragent {
    target => "useragent"
    source => "user_agent"
  }

  geoip {
    source => "real_client_ip"
    target => "geoip"
  }


}

#output { 
#  file {
#    path => "/tmp/logstash_debug.log"
#  }  
#}

output {
    elasticsearch {
    action => "index"
    index => "web-%{+YYYY.MM}"
    #index => "test3"
    hosts => ["10.11.22.33:9200"]
    template => "/etc/logstash/template_log1.json"
    template_name => "template_log1"
    template_overwrite => true
    }
}
